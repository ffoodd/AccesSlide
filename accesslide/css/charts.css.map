{"version":3,"sources":["_switch.scss","_sseeeedd-vars.scss","_sseeeedd-func.scss","charts.scss"],"names":[],"mappings":"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","file":"charts.css","sourcesContent":["/* ==================== */\n/* == Switch\n/* ==================== */\n\nbutton[role=\"switch\"] {\n  background-color: rgba( palette( dominant, light ), .1 );\n  border-radius: rem( 22 ) !important;\n  box-sizing: content-box;\n  box-shadow: none !important;;\n  color: palette( dominant );\n  font-size: 1rem;\n  height: rem( 44 );\n  line-height: rem( 44 );\n  margin-left: $gutter * 2;\n  padding: 0 $gutter * 3;\n  position: relative;\n  transition: all .3s map-get( $timing-functions, 'enter' );\n  width: rem( 76 );\n  will-change: background-color;\n\n  &::before {\n    background: palette( default, contrast );\n    border-radius: rem( 22 );\n    content: \"\";\n    position: absolute;\n    height: rem( 38 );\n    left: rem( 4 );\n    top: rem( 4 );\n    transform: none;\n    transition: transform .3s map-get( $timing-functions, 'enter' ) 0s;\n    width: rem( 38 );\n    will-change: transform;\n  }\n\n  &:hover,\n  &:focus,\n  &:active {\n    background-color: rgba( palette( dominant, light ), .075 );\n    color: palette( dominant, dark );\n    outline-color: transparent;\n    top: 0;\n  }\n\n  &[aria-checked=\"true\"] {\n    background-color: rgba( palette( success, light ), .3 );\n\n    &::before {\n      background: palette( success, dark );\n      transform: translateX(#{rem( 78 ) + $gutter * 3});\n    }\n  }\n\n  > *:first-child,\n  &[aria-checked=\"true\"] > *:last-child {\n    display: none;\n  }\n\n  &[aria-checked=\"true\"] > *:first-child {\n    display: block;\n  }\n}\n\n@media screen and (-ms-high-contrast: active) {\n  button[role=\"switch\"] {\n    background-color: buttonFace;\n    border: 1px solid currentColor !important;\n    color: buttonText;\n\n    > span {\n      background-color: inherit;\n    }\n\n    &::before {\n      background: currentColor;\n    }\n\n    @supports (--css: var(--iables)) {\n      button[role=\"switch\"][aria-checked=\"true\"] {\n        background-color: highlight;\n        color: highlightText;\n      }\n    }\n  }\n}\n","@charset \"UTF-8\";\n/* ----------------------------- */\n/* Table of contents */\n/* ----------------------------- */\n/*\n  == Paths\n  == Colors\n  == Timing functions\n  == Spacings\n  == Patterns\n  == Formage\n*/\n\n/* ==================== */\n/* == Paths\n/* ==================== */\n$path: \"../\" !default;\n\n/* ==================== */\n/* == Colors\n/* ==================== */\n$colors: (\n  dominant: (\n    base: #444,\n    light: mediumblue,\n    dark: black,\n    contrast: white\n  ),\n  secondary: (\n    base: mediumblue,\n    light: deepskyblue,\n    dark: DarkBlue,\n    contrast: white\n  ),\n  accent: (\n    base: rebeccapurple,\n    light: blueviolet,\n    dark: indigo,\n    contrast: white\n  ),\n  alert: (\n    base: crimson,\n    light: firebrick,\n    dark: #911,\n    contrast: white\n  ),\n  success: (\n    base: springgreen,\n    light: palegreen,\n    dark: #01ac49,\n    contrast: #444\n  ),\n  muted: (\n    base: gray,\n    light: darkgray,\n    dark: #333,\n    contrast: black\n  ),\n  default: (\n    base: dimgray,\n    light: lightgray,\n    dark: darkgrey,\n    secondary: whitesmoke,\n    contrast: white\n  ),\n  charts: (\n    purple: #734bf9,\n    pink: #e11a81,\n    blue: #0172f0,\n    yellow: #fdc02f,\n    green: #39ca74,\n    red: #ff2d40,\n    gray: #585462\n  )\n);\n\n$blank: str-replace(to-string(palette( accent )), \"#\", \"%23\");\n$blank-focus: str-replace(to-string(palette( accent, dark )), \"#\", \"%23\");\n\n/* ==================== */\n/* == Timing functions\n *\n * @note Simple cubic-bezier curves for timing functions\n * @author David K. Piano\n * @link https://twitter.com/DavidKPiano/status/965704092545900544\n/* ==================== */\n$timing-functions: (\n  enter: cubic-bezier(0, .5, .5, 1),\n  exit: cubic-bezier(.5, 0, 1, .5),\n  move: cubic-bezier(.5, 0, .5, 1)\n);\n\n/* ==================== */\n/* == Spacings\n/* ==================== */\n$full-width: false !default;\n$base: 1140 / 16 !default;\n$width: em( 1024 ) !default;\n$gutter: rem( 16 ) !default;\n$content-width: em( 600 ) !default;\n\n/* ==================== */\n/* == Patterns\n *\n * @note SVG inline patterns coming from:\n * @link http://www.heropatterns.com/\n/* ==================== */\n$patterns: (\n  \"checkers\": \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8' viewBox='0 0 8 8'%3E%3Cg fill='%23ffffff99'%3E%3Cpath fill-rule='evenodd' d='M0 0h4v4H0V0zm4 4h4v4H4V4z'/%3E%3C/g%3E%3C/svg%3E\",\n  \"hexagons\": \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='14' height='24' viewBox='0 0 28 49'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23ffffff99' fill-rule='nonzero'%3E%3Cpath d='M13.99 9.25l13 7.5v15l-13 7.5L1 31.75v-15l12.99-7.5zM3 17.9v12.7l10.99 6.34 11-6.35V17.9l-11-6.34L3 17.9zM0 15l12.98-7.5V0h-2v6.35L0 12.69v2.3zm0 18.5L12.98 41v8h-2v-6.85L0 35.81v-2.3zM15 0v7.5L27.99 15H28v-2.31h-.01L17 6.35V0h-2zm0 49v-8l12.99-7.5H28v2.31h-.01L17 42.15V49h-2z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\",\n  \"triangles\": \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='16' viewBox='0 0 36 72'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23ffffff99'%3E%3Cpath d='M2 6h12L8 18 2 6zm18 36h12l-6 12-6-12z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\",\n  \"zig\": \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='20' height='12' viewBox='0 0 20 12'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23ffffff99'%3E%3Cpath d='M9.8 12L0 2.2V.8l10 10 10-10v1.4L10.2 12h-.4zm-4 0L0 6.2V4.8L7.2 12H5.8zm8.4 0L20 6.2V4.8L12.8 12h1.4zM9.8 0l.2.2.2-.2h-.4zm-4 0L10 4.2 14.2 0h-1.4L10 2.8 7.2 0H5.8z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\",\n  \"stripes\": \"data:image/svg+xml,%3Csvg width='6' height='6' viewBox='0 0 6 6' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23ffffff99' fill-rule='evenodd'%3E%3Cpath d='M5 0h1L0 6V5zM6 5v1H5z'/%3E%3C/g%3E%3C/svg%3E\",\n  \"dots\": \"data:image/svg+xml,%3Csvg width='10' height='10' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23ffffff99' fill-rule='evenodd'%3E%3Ccircle cx='3' cy='3' r='3'/%3E%3Ccircle cx='13' cy='13' r='3'/%3E%3C/g%3E%3C/svg%3E\"\n);\n\n\n/* ==================== */\n/* == Inline icons\n/* ==================== */\n$icons: (\n  \"external\": \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Cpath d='M91.875 62H85v23H15V15h23V0H0v100h100V62z'/%3E%3Cpath d='M54 0v.627l17.787 17.85L52.701 38H38v24h24V49.799l20.773-20.337L99.374 46H100V0z'/%3E%3C/svg%3E\",\n  \"unsafe\": \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 47 59.5'%3E%3Cpath d='m 44,26.5 h -3.5 v -10 C 40.5,7.402 33.098,0 24,0 H 23 C 14.801,0 7.943,5.874 6.694,13.966 c -0.295,1.91 1.015,3.698 2.925,3.993 1.916,0.297 3.699,-1.016 3.993,-2.925 C 14.319,10.454 18.355,7 23,7 h 1 c 5.238,0 9.5,4.262 9.5,9.5 v 10 H 3 c -1.657,0 -3,1.343 -3,3 v 27 c 0,1.657 1.343,3 3,3 h 41 c 1.657,0 3,-1.343 3,-3 v -27 c 0,-1.657 -1.343,-3 -3,-3 z'/%3E%3C/svg%3E\",\n  \"anchor\": \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 85 85.2'%3E%3Cpath d='M56.7 51.7l9.1 9c-2.3 5.5-8.1 9.7-17.3 11.2v-45c6.1-2.3 8-7.1 8-12.7C56.5 6.4 50.2 0 42.4 0s-14 6.3-14 14.2c0 5.6 1.9 10.4 8 12.7v45c-9.1-1.5-15-5.7-17.3-11.2l9.2-9H0v27.8l9.8-9.8c6.2 9.2 18.5 15.5 32.7 15.5 14.2 0 26.5-6.3 32.7-15.5l9.8 9.8V51.7zM42.5 19c-2.6 0-4.7-2.1-4.7-4.7s2.1-4.7 4.7-4.7 4.7 2.1 4.7 4.7-2.1 4.7-4.7 4.7z'/%3E%3C/svg%3E\",\n  \"select\": \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 59 47.5'%3E%3Cpath d='M29.414,37.657 L0.344,8.586 L8.828,0.102 L29.414,20.686 L50,0.1 L58.484,8.585 L29.414,37.657'/%3E%3C/svg%3E\",\n  \"required\": \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 125'%3E%3Cpath fill='crimson' d='M53.5355339 41.4644661L70 25l5 5-16.4644661 16.4644661h23.2842713v7.0710678H58.5355339L75 70l-5 5-16.4644661-16.4644661v23.2842713h-7.0710678V58.5355339L30 75l-5-5 16.4644661-16.4644661H18.1801948v-7.0710678h23.2842713L25 30l5-5 16.4644661 16.4644661V18.1801948h7.0710678z'/%3E%3C/svg%3E\",\n  \"valid\": \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 6.3 6.1'%3E%3Cpath fill='%2301ac49' d='M0 2.6235l.898-.898 1.3851 1.3851L5.3936 0l.898.8981-4.0085 4.0085L0 2.6235z'/%3E%3C/svg%3E\",\n  \"invalid\": \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 125'%3E%3Cpath fill='crimson' d='M74.749 11.109L50 35.858 25.251 11.109 11.109 25.251 35.858 50 11.109 74.749l14.142 14.142L50 64.142l24.749 24.749 14.142-14.142L64.142 50l24.749-24.749z'/%3E%3C/svg%3E\",\n  \"mail\": \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 84 56'%3E%3Cpath d='M0 0v3.7188l42 28.62504L84.000004 3.7188V0zm0 10.9688v45.03124h84.000004V10.9688L43.6875 38.46884a3.0003 3.0003 0 0 1-3.375 0z'/%3E%3C/svg%3E\",\n  \"tel\": \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 46 88'%3E%3Cpath d='M6 0C2.676 0 0 2.676 0 6v76.00005c0 3.324 2.676 6 6 6h34c3.324 0 6-2.676 6-6V6c0-3.324-2.676-6-6-6zM4 10h38v64.00005H4z'/%3E%3C/svg%3E\"\n);\n\n\n/* ==================== */\n/* == Formage\n/* ==================== */\n$form-fields: ( 'input[type=\"text\"], input[type=\"number\"], input[type=\"search\"], input[type=\"password\"], input[type=\"email\"], input[type=\"url\"], input[type=\"tel\"], input[type=\"date\"], input[type=\"time\"], input[type=\"datetime-local\"], input[type=\"month\"], input[type=\"week\"], input[type=\"color\"], input[type=\"file\"], textarea' );\n$form-radio-checkbox: ( 'input[type=\"checkbox\"], input[type=\"radio\"]' );\n$form-buttons: ( '.button, button, input[type=\"submit\"], input[type=\"reset\"], input[type=\"button\"]' );\n","// ----------------------------- */\n// == Functions\n// ----------------------------- */\n\n// em conversion\n// @note Found in Marie Guillaumet's Gists\n// @author Marie Guillaumet\n// @see https://twitter.com/kReEsTaL\n// @see http://marieguillaumet.com/\n// @see https://gist.github.com/ijy/1441967\n@function em( $f, $base: 16 ) {\n  $everything-okay: true;\n\n  @if type-of( $f ) != number {\n    @warn \"Biip ! `{$s}` is not a valid number.\";\n    $everything-okay: false;\n  }\n\n  @if $everything-okay == true {\n    @if $f == 0 { @return 0 }\n    @return $f / $base * 1em;\n  }\n}\n\n// rem conversion\n@function rem( $f, $base: 16 ) {\n  $everything-okay: true;\n\n  @if type-of( $f ) != number {\n    @warn \"Biip ! `{$s}` is not a valid number.\";\n    $everything-okay: false;\n  }\n\n  @if $everything-okay == true {\n    @if $f == 0 { @return 0 }\n    @return $f / $base * 1rem;\n  }\n}\n\n\n// Color palette\n// @note Allow to pick a color in defined color palette\n// @author Tom Davies\n// @see http://erskinedesign.com/blog/friendlier-colour-names-sass-maps/\n@function palette( $color, $tone: \"base\" ) {\n  @if ( map-has-key( $colors, $color ) ) {\n    @if ( map-has-key( map-get( $colors, $color ), $tone ) ) {\n      @return map-get( map-get( $colors, $color ), $tone );\n    } @else {\n      @error \"Biip ! `#{$tone}` is not a valid `#{$color}`'s variants.\";\n    }\n  } @else {\n    @error \"Biip ! `#{$color}` is not part of our palette…\";\n  }\n}\n\n\n// Replace `$search` with `$replace` in `$string`\n// @author Hugo Giraudel\n// @param {String} $string - Initial string\n// @param {String} $search - Substring to replace\n// @param {String} $replace ('') - New value\n// @return {String} - Updated string\n// @see https://www.sassmeister.com/gist/1b4f2da5527830088e4d\n@function str-replace($string, $search, $replace: '') {\n  $index: str-index($string, $search);\n  \n  @if $index {\n    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n  }\n  \n  @return $string;\n}\n\n\n// Convert value to string\n// @author Hugo Giraudel\n// @see https://hugogiraudel.com/2014/01/27/casting-types-in-sass/\n@function to-string($value) {\n  @return inspect($value);\n}\n\n@mixin sin($angle) {\n  --sin-term-#{$angle}-1: var(--#{$angle});\n  --sin-term-#{$angle}-2: calc((var(--#{$angle}) * var(--#{$angle}) * var(--#{$angle})) / 6);\n  --sin-term-#{$angle}-3: calc((var(--#{$angle}) * var(--#{$angle}) * var(--#{$angle}) * var(--#{$angle}) * var(--#{$angle})) / 120);\n  --sin-term-#{$angle}-4: calc((var(--#{$angle}) * var(--#{$angle}) * var(--#{$angle}) * var(--#{$angle}) * var(--#{$angle}) * var(--#{$angle}) * var(--#{$angle})) / 5040);\n  --sin-term-#{$angle}-5: calc((var(--#{$angle}) * var(--#{$angle}) * var(--#{$angle}) * var(--#{$angle}) * var(--#{$angle}) * var(--#{$angle}) * var(--#{$angle}) * var(--#{$angle}) * var(--#{$angle})) / 362880);\n  --sin-#{$angle}: calc(var(--sin-term-#{$angle}-1) - var(--sin-term-#{$angle}-2) + var(--sin-term-#{$angle}-3) - var(--sin-term-#{$angle}-4) + var(--sin-term-#{$angle}-5));\n}\n\n","/* ==================== */\n/* == sseeeedd\n/* ==================== */\n@import \"sseeeedd-func\";\n@import \"sseeeedd-vars\";\n@import \"switch\";\n\n.pl-5 {\n  padding-left: 5rem;\n}\n\n.fieldset {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.illustration[role=\"group\"] {\n  margin: $gutter * 3 auto;\n  max-width: min-content;\n  \n  img {\n    max-width: none;\n  }\n}\n\nbody > :not(.modeplan) .slide {\n    overflow: hidden !important;\n    \n    &[id=\"white-slide\"] {\n      background: palette( default, contrast );\n    }\n}\n\n/* ==================== */\n/* == Tables\n/* ==================== */\n\ntable {\n  font-size: 1rem;\n  margin: auto;\n}\n\npre[class*=\"language-\"] {\n    overflow-y: hidden;\n}\n\npre code[class*=\"language-\"] {\n  font-size: 1.25rem;\n}\n\n.table-ffoodd {\n  background: palette( default, contrast );\n  border-collapse: collapse;\n  caption-side: top;\n  font-feature-settings: \"tnum\";\n  width: 100%;\n  vertical-align: top;\n\n  > caption:first-child {\n    font-style: italic;\n    margin: 0;\n    padding: rem( 40 ) $gutter;\n  }\n  \n  th,\n  td {\n    padding: $gutter / 2 rem( 12 );\n    text-align: left;\n\n    thead &,\n    tbody & {\n      border-bottom: 1px solid palette( default, secondary );\n    }\n  }\n\n  th,\n  table strong {\n    color: palette( dominant, dark );\n  }\n\n  td {\n    line-height: 1.25;\n    max-width: 100%;\n  }\n\n  tbody {\n    border: 1px solid palette( default, secondary );\n  }\n}\n\n/* ==================== */\n/* == Charts\n/* ==================== */\n[class*=\"charts\"] {\n  [role=\"presentation\"] {\n    display: none;\n  }\n\n  abbr[title] {\n    border-bottom: 0;\n    font-size: small;\n    font-weight: normal;\n    text-transform: none;\n  }\n}\n\n/* ==================== */\n/* == Table based Charts\n/* ==================== */\n.table-container .fieldset {\n  display: none !important;\n}\n\n.table-charts {\n  caption-side: bottom;\n  empty-cells: hide;\n  margin: 1.5em auto;\n  overflow: hidden;\n  padding: 1em;\n\n  /**\n   * @note Defining a CSS custom property for each inlined SVG pattern\n   * @author Trys Mudford\n   * @link https://www.trysmudford.com/blog/using-css-custom-properties/\n   * @via Jeremy Keith\n   * @link https://adactio.com/journal/15075\n   */\n  @each $name, $pattern in $patterns {\n    --#{$name}: url(\"#{$pattern}\");\n  }\n\n  > caption:first-child {\n    background: inherit;\n    font-style: normal;\n    padding: $gutter 0;\n  }\n}\n\ntable:not(.table-charts) .sr-only {\n  clip: auto !important;\n\tclip-path: none !important;\n\theight: auto !important;\n\toverflow: visible !important;\n  position: static !important;\n\twidth: auto !important;\n\twhite-space: normal !important;\n}\n\n@media screen and (min-width: em(480)) {\n  .table-charts {\n    border-collapse: separate;\n    border-spacing: 0;\n    /**\n     * @note Trying to improve paint & layout performances\n     * @link https://developer.mozilla.org/fr/docs/Web/CSS/contain\n     */\n    contain: content;\n\n    th,\n    td {\n      border: 0;\n      padding: 0;\n\n      &:empty {\n        display: none !important;\n      }\n    }\n\n    /** Bar charts */\n    @supports (grid-template-columns: repeat(var(--scale, 100), minmax(0, 1fr))) {\n      &.bar {\n        \n        &.step-1 {\n          caption {\n            text-align: initial;\n            text-indent: em( 256 );\n          }\n          \n          tbody tr {\n            display: grid;\n            grid-auto-rows: 1fr;\n            grid-row-gap: $gutter / 2;\n            grid-template-columns: minmax(min-content, em( 240 )) repeat(var(--scale, 100), minmax(0, 1fr)) 10ch;\n            transition: opacity .2s map-get( $timing-functions, 'move' );\n\n            th {\n              grid-column: 1 / 1;\n              margin: $gutter / 2 0 0;\n              padding: 0 $gutter 0 0;\n              text-align: right;\n            }\n            \n            td {\n              background: currentColor;\n              grid-column: 2 / var(--value, 0);\n              margin: $gutter / 2 0 0;\n              position: relative;\n            }\n          }\n        }\n          \n        &.step-2 {\n          tbody tr td span {\n            background: inherit;\n            -webkit-text-fill-color: transparent;\n            -webkit-background-clip: text;\n            font-weight: bold;\n            left: 100%;\n            line-height: 1.5;\n            position: absolute;\n          }\n        }\n        \n        &.step-3 {\n          tbody tr {\n            td {\n              --size: calc(var(--scale, 100) * 100%);\n              --position: calc(var(--value, 0) / var(--scale, 100) * 100%);\n              background-blend-mode: hard-light;\n              background-color: transparent;\n              background-position: var(--position) 0%, center;\n              background-size:  var(--size) 100%, contain;\n            }\n            \n            @each $name, $pattern in $patterns {\n              $i: index($patterns, ($name $pattern));\n\n              &:nth-child(#{$i}n + #{$i}) td {\n                background-image:\n                  linear-gradient(to right,\n                    palette( success, dark ),\n                    palette( dominant ),\n                    palette( secondary ),\n                    palette( accent ),\n                    palette( alert )\n                  ),\n                  var(--#{$name}); /* 1 */\n              }\n            }\n          }\n        }\n\n        &.step-4 {\n          &:hover {\n            tr {\n              opacity: .5;\n            }\n\n            tr:hover {\n              opacity: 1;\n            }\n          }\n\n          /**\n           * @note Custom color palette for WHCM\n           * @note Inspired by Greg Whitworth's post\n           * @link http://www.gwhitworth.com/blog/2017/04/how-to-use-ms-high-contrast\n           */\n          @media screen and (-ms-high-contrast: active) {\n            @each $name, $pattern in $patterns {\n              $i: index($patterns, ($name $pattern));\n\n              &:nth-child(#{$i}n + #{$i}) td {\n                background-image:\n                  linear-gradient(to right,\n                    Window,\n                    ButtonFace,\n                    ButtonShadow,\n                    ButtonText,\n                    highlight\n                  ),\n                  var(--#{$name});\n              }\n            }\n          }\n            \n          &.waterfall {\n            @each $number in 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 {\n              tr:nth-of-type(#{$number}) td {\n                grid-column: var(--#{$number - 1}, 0) / var(--value, 0);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    /** Line charts */\n    @supports (clip-path: polygon(0% calc(100% - (var(--1) * 100% / var(--y))))) {\n      &.line {\n        --offset: calc((100% / var(--x)) / 2);\n        --height: calc( #{$width / 2} - #{$gutter * 2} );\n        --bottom: calc( 100% - var(--height) );\n        position: relative;\n        transition:\n          background .3s map-get( $timing-functions, 'move' ),\n          color .3s map-get( $timing-functions, 'move' );\n\n        &::after {\n          bottom: var(--bottom);\n          content: \"\";\n          position: absolute;\n          top: 0;\n          width: 100%;\n          z-index: 1;\n        }\n        \n        tr::before {\n          content: \"\";\n          position: absolute;\n        }\n        \n        [scope=\"row\"],\n        thead th:first-child {\n            color: var(--color, currentColor);\n            text-align: left;\n        }\n        \n        th,\n        td {\n          background: palette( default, contrast );\n          font-weight: bold;\n          text-align: center;\n          width: calc( 100% / var(--x) );\n\n          &:hover {\n            color: palette( secondary );\n          }\n        }\n\n        &.step-1 {\n            padding: var(--height) 0 $gutter;\n        \n            &::after {\n              --scale: calc( ( 100% - (var(--y) * 1px) ) / var(--y) );\n              background:\n                repeating-linear-gradient(\n                  to bottom,\n                  white, white var(--scale),\n                  rgba(0, 0, 0, .25) calc(var(--scale) + 1px)\n                );\n              bottom: var(--bottom);\n              content: \"\";\n              position: absolute;\n              top: 0;\n              width: 100%;\n              z-index: 1;\n            }\n        }\n\n        &.step-2 {\n            [style]::before {\n              bottom: var(--bottom);\n              background: linear-gradient(to top, palette( secondary, light ), palette( alert ) 75%);\n              clip-path: polygon(\n                0% 100%,\n                calc((100% / var(--x) * 1)) 100%,\n                calc((100% / var(--x) * 1)) calc(100% - (var(--1) / var(--y) * 100%)),\n                calc((100% / var(--x) * 1) + var(--offset)) calc(100% - (var(--1) / var(--y) * 100%)),\n                calc((100% / var(--x) * 2) + var(--offset)) calc(100% - (var(--2) / var(--y) * 100%)),\n                calc((100% / var(--x) * 3) + var(--offset)) calc(100% - (var(--3) / var(--y) * 100%)),\n                calc((100% / var(--x) * 4) + var(--offset)) calc(100% - (var(--4) / var(--y) * 100%)),\n                calc((100% / var(--x) * 5) + var(--offset)) calc(100% - (var(--5) / var(--y) * 100%)),\n                calc((100% / var(--x) * 6) + var(--offset)) calc(100% - (var(--6) / var(--y) * 100%)),\n                calc((100% / var(--x) * 7) + var(--offset)) calc(100% - (var(--7) / var(--y) * 100%)),\n                calc((100% / var(--x) * 8) + var(--offset)) calc(100% - (var(--8) / var(--y) * 100%)),\n                calc((100% / var(--x) * 9) + var(--offset)) calc(100% - (var(--9) / var(--y) * 100%)),\n                calc((100% / var(--x) * 10) + var(--offset)) calc(100% - (var(--10) / var(--y) * 100%)),\n                calc((100% / var(--x) * 11) + var(--offset)) calc(100% - (var(--11) / var(--y) * 100%)),\n                calc((100% / var(--x) * 12) + var(--offset)) calc(100% - (var(--12) / var(--y) * 100%)),\n                100% calc(100% - (var(--12) / var(--y) * 100%)),\n                100% 100%,\n                0% 100%\n              );\n              content: \"\";\n              position: absolute;\n              top: 0;\n              width: 100%;\n              z-index: 2;\n            }\n\n            [scope=\"col\"] {\n              &:not(:first-child)::after {\n                background-color: palette( default, contrast );\n                background-image: var(--stripes);\n                background-blend-mode: exclusion;\n                bottom: $gutter * 4;\n                content: \"\";\n                height: calc(100% - #{$gutter * 4});\n                mix-blend-mode: soft-light;\n                opacity: 0;\n                position: absolute;\n                transition: opacity .3s map-get( $timing-functions, 'move' );\n                width: inherit;\n                z-index: 3;\n              }\n       \n              @each $number in 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 {\n                &:nth-child(#{$number})::after {\n                  left: calc(100% / var(--x) * #{$number - 1});\n                }\n              }\n       \n              &:hover::after {\n                opacity: .75;\n              }\n            }\n        }\n        \n        &.step-3 {\n          td {\n            --value: var(--1);\n            --term: var(--t-1);\n            --top: calc( (var(--height) - ( var(--value) / var(--y) * 100% ) ) );\n            line-height: 1.5;\n     \n            &::before {\n              content: '';\n              height: 1.5rem;\n              position: absolute;\n              transform: translateX(-50%);\n              width: inherit;\n              z-index: 10;\n            }\n     \n            /**\n             * 1.\n             * @note Using white-space and:\n             ** `\\A` to make a line-break\n             ** `\\A0` for a non-breakable space\n             * @note Based on CSS Secrets by\n             * @author Lea Verou\n             * @link https://lea.verou.me/2012/02/flexible-multiline-definition-lists-with-2-lines-of-css/\n             *\n             * 2.\n             * @note Display CSS integers custom properties with a trick using counters\n             * @author Cassie Evans\n             * @link https://codepen.io/cassie-codes/pen/22ea69e0f681d45f2f4c2ca5e6acf4ab\n             */\n            &::after {\n              --arrow: calc(100% - #{$gutter / 4});\n              background-color: palette( dominant );\n              clip-path: polygon(\n                0% 0%,\n                100% 0%,\n                100% var(--arrow),\n                calc(50% - #{$gutter / 4}) var(--arrow),\n                50% 100%,\n                calc(50% + #{$gutter / 4}) var(--arrow),\n                0% var(--arrow)\n              );\n              color: palette( dominant, contrast );\n              content: var(--term) \" \" var(--year) \"\\A \" counter(value) \"\\A0°C\"; /* 1 */\n              counter-reset: value var(--value);                                 /* 2 */\n              opacity: 0;\n              padding: $gutter / 2;\n              left: calc( var(--offset) * 3 );\n              pointer-events: none;\n              position: absolute;\n              top: var(--top, 100);\n              transform-origin: 50% calc(100% + 10px);\n              transform:\n                translate3d(-50%, -125%, 0)\n                perspective(1000px)\n                rotate3d(1, 0, 0, 45deg);\n              transition:\n                opacity .2s map-get( $timing-functions, 'enter' ),\n                transform .2s map-get( $timing-functions, 'enter' );\n              will-change: opacity, transform;\n              white-space: pre;\n              z-index: 5;\n            }\n     \n            @each $number in 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 {\n              &:nth-child(#{$number})::after {\n                --value: var(--#{$number - 1});\n                --term: var(--t-#{$number - 1});\n                --top: calc( (var(--height) - ( var(--value) / var(--y) * var(--height) ) ) );\n                left: calc( ( 100% / var(--x) * #{$number - 1} ) + var(--offset) );\n              }\n            }\n     \n            &:hover::after {\n              opacity: 1;\n              transform:\n                translate3d(-50%, -125%, 0)\n                perspective(1000px)\n                rotate3d(1, 0, 0, 0deg);\n              transition:\n                opacity .2s map-get( $timing-functions, 'exit' ),\n                transform .2s map-get( $timing-functions, 'exit' );\n            }\n          }\n        }\n\n        &.points {\n          [style] {\n              &::before {\n                background-color: var(--color, currentColor);\n                clip-path: polygon(\n                  calc((100% / var(--x) * 1) + var(--offset)) calc(100% - (var(--1) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 2) + var(--offset)) calc(100% - (var(--2) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 3) + var(--offset)) calc(100% - (var(--3) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 4) + var(--offset)) calc(100% - (var(--4) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 5) + var(--offset)) calc(100% - (var(--5) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 6) + var(--offset)) calc(100% - (var(--6) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 7) + var(--offset)) calc(100% - (var(--7) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 8) + var(--offset)) calc(100% - (var(--8) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 9) + var(--offset)) calc(100% - (var(--9) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 10) + var(--offset)) calc(100% - (var(--10) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 11) + var(--offset)) calc(100% - (var(--11) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 12) + var(--offset)) calc(100% - (var(--12) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 13) + var(--offset)) calc(100% - (var(--12) / var(--y) * 100%)),\n                  100% calc(100% - (var(--12) / var(--y) * 100%)),\n                  100% calc((100% + #{$gutter / 4}) - (var(--12) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 13) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--12) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 12) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--12) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 11) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--11) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 10) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--10) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 9) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--9) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 8) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--8) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 7) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--7) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 6) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--6) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 5) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--5) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 4) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--4) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 3) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--3) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 2) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--2) / var(--y) * 100%)),\n                  calc((100% / var(--x) * 1) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--1) / var(--y) * 100%))\n                );\n                transition: opacity .3s map-get( $timing-functions, 'move' );\n              }\n   \n              th::before {\n                 background-color: var(--color, currentColor);\n                 content: \"\";\n                 display: inline-block;\n                 height: 1rem;\n                 transform: translate3d(-.2rem, .1rem, 0);\n                 width: 1rem;\n              }\n   \n              td {\n                --top: calc( (var(--height) - ( var(--value) / var(--y) * var(--height) ) ) );\n   \n                &::before {\n                  --size: #{$gutter};\n                  background-color: var(--color, currentColor);\n                  border: 2px solid palette( default, contrast );\n                  border-radius: 50%;\n                  box-shadow: 0 0 #{$gutter / 4} rgba(0, 0, 0, .5);\n                  content: \"\";\n                  height: var(--size);\n                  left: calc( var(--offset) * 3 );\n                  position: absolute;\n                  top: var(--top, 100);\n                  transform: translate3d(calc(var(--size) / -2), calc(var(--size) / -2), 0);\n                  transition:\n                      opacity .3s map-get( $timing-functions, 'move' ),\n                      transform .3s map-get( $timing-functions, 'move' );\n                  width: var(--size);\n                  z-index: 4;\n                }\n   \n                @each $number in 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 {\n                  &:nth-of-type(#{$number})::before {\n                    --value: var(--#{$number});\n                    --top: calc( (var(--height) - ( var(--value) / var(--y) * var(--height) ) ) );\n                    left: calc( ( 100% / var(--x) * #{$number} ) + var(--offset) );\n                  }\n                }\n              }\n          }\n   \n          @each $name, $pattern in $patterns {\n           $i: index($patterns, ($name $pattern));\n   \n           [style]:nth-child(#{$i}n + #{$i})::before,\n           [style]:nth-child(#{$i}n + #{$i}) th::before,\n           [style]:nth-child(#{$i}n + #{$i}) td::before {\n             background-image: var(--#{$name}); /* 1 */\n           }\n         }\n   \n          tbody:hover [style]::before,\n          tbody:hover [style] td::before {\n              opacity: .25;\n          }\n   \n          tbody:hover [style]:hover::before,\n          tbody:hover [style]:hover td::before {\n              opacity: 1;\n          }\n   \n          tbody:hover [style]:hover td::before {\n              transform:\n                  translate3d(calc(var(--size) / -2), calc(var(--size) / -2), 0)\n                  scale(1.25);\n          }\n   \n          [scope=\"col\"]:not(:first-child) {\n            &::after {\n              mix-blend-mode: multiply;\n            }\n   \n            &:hover::after {\n             opacity: .5;\n            }\n          }\n        }\n      \n\n      /**\n       * @note Custom color palette for WHCM\n       * @note Inspired by Greg Whitworth's post\n       * @link http://www.gwhitworth.com/blog/2017/04/how-to-use-ms-high-contrast\n       */\n      @media screen and (-ms-high-contrast: active) {\n        &.line [style]::before {\n          background: linear-gradient(to top, ButtonHighlight, Highlight 75%);\n        }\n      }\n    }\n    }\n\n    /** Radar Charts */\n    @supports(clip-path: polygon(calc( 0% 0%, 100% - ( var(--1) * 100% / var(--scale) ) ) 100%, 100% 100%)) {\n      .radar-container .fieldset {\n        display: flex !important;\n      }\n\n      &.radar {\n        --radius: 14rem;\n        --unitless-radius: calc( 1024 / 16 / 5 );\n        --size: calc( var(--radius) / var(--scale) );\n        --part: calc( 360deg / var(--items) );\n        background-image:\n          repeating-radial-gradient(\n            circle at 50%,\n            rgba(0, 0, 0, .2),\n            rgba(0, 0, 0, .2) 2px,\n            transparent 2px,\n            transparent calc(var(--size) * var(--step))\n          ),\n          repeating-radial-gradient(\n            circle at 50%,\n            rgba(0, 0, 0, .1),\n            rgba(0, 0, 0, .1) 2px,\n            transparent 2px,\n            transparent var(--size)\n          );\n        border: 2px solid;\n        border-radius: 50%;\n        contain: layout;\n        counter-reset: scale var(--scale);\n        display: block;\n        height: calc( var(--radius) * 2 );\n        margin: 1rem auto;\n        overflow: visible;\n        position: relative;\n        width: calc( var(--radius) * 2 );\n\n        caption {\n          background: none;\n          bottom: $gutter * -10;\n          position: absolute;\n        }\n        \n        &.step-1 {\n          /**\n           * Placing items around a circle based on:\n           * @link https://stackoverflow.com/questions/12813573/position-icons-into-circle\n           * @link http://dabblet.com/gist/3866686\n           * @author Ana Tudor\n           *\n           * @note Negative values for radius helps to start at the top left corner\n           */\n          [scope=\"col\"] {\n            --away: calc( (var(--radius) * -1) - 50% );\n            left: 50%;\n            margin: 0;\n            padding: 0 $gutter;\n            position: absolute;\n            top: 50%;\n            transform:\n              translate3d(-50%, -50%, 0)\n              rotate( calc(var(--part) * var(--index, 1)) )\n              translate( var(--away) )\n              rotate( calc(var(--part) * var(--index, 1) * -1) );\n          }\n      \n          @each $number in 1, 2, 3, 4, 5, 6, 7 {\n            td:nth-of-type(#{$number}),\n            [scope=\"col\"]:nth-of-type(#{$number}) {\n              --index: #{$number};\n            }\n          }\n            \n        [scope=\"col\"] {\n            &::after {\n              color: palette( accent );\n              display: block;\n              font-size: small;\n              font-weight: 400;\n            }\n        \n            /**\n             * 1.\n             * @note Display CSS integers custom properties with a trick using counters\n             * @author Cassie Evans\n             * @link https://codepen.io/cassie-codes/pen/22ea69e0f681d45f2f4c2ca5e6acf4ab\n             */\n            @each $number in 1, 2, 3, 4, 5, 6, 7 {\n              &:nth-child(#{$number})::after {\n                counter-reset: value var(--#{$number});           /* 1 */\n                content: counter(value) \"\\A0/\\A0\" counter(scale); /* 1 */\n              }\n            }\n          }\n        }\n          \n        &.step-2 {\n          /**\n           * This is quite sophisticated, we're mixing multiple techniques\n           *\n           * @note Setting items as parts of the circle:\n           * @link https://tympanus.net/codrops/2013/08/09/building-a-circular-navigation-with-css-transforms/\n           * @author Sara Soueidan\n           *\n           * @note Because we skew items, clip-path() needs to take skew angle into account\n           * @note To do so, we need to know skewed width (which is hypothenuse of the resulting triangle)\n           * @note We only know two angles (skew one + suqare one) and a side (initial width),\n           * @note So we need to compute the sinus of the opposite angle to get hypothenuse\n           * @note Thanks god, Stereokai made trigonometry functions in pure CSS:\n           *\n           * @note Trigonometry functions based on:\n           * @link https://gist.github.com/stereokai/7666bfe93929b14c2dced148c79e0e97\n           * @author Stereokai\n           */\n          td {\n            --skew: calc( 90deg - var(--part) );\n            border-bottom: 1px solid palette( accent, light );\n            height: 50%;\n            left: 0;\n            margin: 0;\n            position: absolute;\n            top: 0;\n            width: 50%;\n\n            @each $number in 1, 2, 3, 4, 5, 6, 7 {\n              &:nth-of-type(#{$number}) span {\n                --pos: calc( 100% - (var(--#{$number + 1}) * 100% / (var(--scale) * var(--ratio) ) ) );\n                clip-path: polygon(\n                  100% var(--pos),\n                  calc( 100% - ( var(--#{$number}) * 100% / var(--scale) ) ) 100%,\n                  100% 100%\n                );\n              }\n            }\n\n            &::after,\n            &::before {\n              display: none;\n            }\n          }\n            \n          span {\n            --ratio: 1;\n            background: linear-gradient(\n              to top left,\n              palette( accent, light ) 10%,\n              palette( secondary, dark ) 75%\n            );\n            filter: drop-shadow( 0 0 $gutter palette( accent, dark ) );\n            height: 100%;\n            position: absolute;\n            width: 100%;\n          }\n        }\n            \n        &.step-3 {\n            td {\n                transform:\n                  rotate( calc(var(--part) * var(--index, 1)) )\n                  skew( var(--skew) );\n                transform-origin: 100% 100%;\n            }\n        }\n          \n        &.step-4 {\n          span {\n            --opposite: calc( 180 - (90 + (90 - (360 / var(--items)))) );\n            // get opposite angle in radians\n            --angle: calc( var(--opposite) * 0.01745329251 );\n            // calc() sin, dark wizardry!\n            @include sin(angle);\n            // calc() hypothenuse\n            --hypo: calc( var(--unitless-radius) / var(--sin-angle) );\n            // get the ratio: skewed / initial width\n            --ratio: calc( var(--hypo) / var(--unitless-radius) );\n        }\n      }\n\n        &.radar-multiple {\n          margin-bottom: $gutter * 12;\n            \n            [scope=\"col\"]::after {\n                display: none;\n            }\n\n          tbody {\n            columns: var(--areas);\n            vertical-align: bottom;\n          }\n\n          [scope=\"row\"] {\n            bottom: $gutter * -8;\n            height: $gutter * 2;\n            left: $gutter;\n            position: absolute;\n\n            &::before {\n              background: var(--color, currentColor);\n              content: \"\";\n              display: inline-block;\n              height: $gutter;\n              margin-right: $gutter / 4;\n              transform: translate3d(0, .1rem, 0);\n              width: $gutter;\n            }\n          }\n\n          // Allowing more areas :)\n          @each $number in 1 {\n            tr:nth-child(#{$number + 1}) [scope=\"row\"] {\n              left: calc( #{$gutter} + (100% / var(--areas)) * #{$number});\n            }\n          }\n\n          td {\n            align-items: flex-end;\n            border-color: var(--color, currentColor);\n            display: flex;\n            justify-content: flex-end;\n            opacity: .5;\n            pointer-events: none;\n            transition: opacity .2s map-get( $timing-functions, 'move' );\n            will-change: opacity;\n            z-index: 0;\n\n            &::after {\n              color: var(--color, currentColor);\n              display: block;\n              font-size: small;\n              font-weight: 700;\n              text-indent: #{$gutter / -2};\n              transform:\n                skew( calc( var(--skew) * -1 ) )\n                rotate( calc( var(--part) * var(--index, 1) * -1 ) );\n              transform-origin: 0 0;\n              transition: inherit;\n              width: 100%;\n              will-change: inherit;\n              white-space: nowrap;\n            }\n      \n            @each $number in 1, 2, 3, 4, 5, 6, 7 {\n              &:nth-of-type(#{$number})::after {\n                counter-reset: value var(--#{$number}); /* 1 */\n                content: counter(value);                /* 1 */\n                width: calc( var(--#{$number}) * 100% / var(--scale) );\n              }\n            }\n          }\n      \n          span {\n            background: var(--color, currentColor);\n            pointer-events: auto;\n      \n            @supports ( mask-image: url() ) {\n              mask-image: radial-gradient(circle at bottom right, rgba(0,0,0,1), rgba(0,0,0,.5));\n            }\n          }\n\n          @media (hover: hover) {\n            td {\n              opacity: .25;\n\n              &::after {\n                opacity: 0;\n              }\n            }\n\n            tr:hover td {\n              opacity: 1;\n              z-index: 1;\n\n              &::after {\n                opacity: inherit;\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    /** Pie charts */\n        @supports (clip-path: polygon( 50% calc( 50% + ( var(--gt-25, 0) ) ) )) {\n          .pie-container .fieldset {\n            display: flex !important;\n          }\n\n          &.pie {\n              &.step-1 {\n                margin: 0 auto;\n                padding-top: calc(#{$width / 2} - #{$gutter * 2});\n                position: relative;\n\n                tbody {\n                  --side: calc( #{$width} / 2 );\n                  --hypo: calc( 1024 / 16 / 2 );\n                  display: table-row;\n                }\n\n                tr {\n                  display: table-cell;\n                  transition: opacity .3s map-get( $timing-functions, 'move' );\n                  will-change: opacity;\n                }\n\n                [scope=\"row\"] {\n                  padding-right: $gutter / 2;\n\n                  &::before {\n                    background: var(--color, currentColor);\n                    content: \"\";\n                    display: inline-block;\n                    height: $gutter;\n                    transform: translate3d(-.2rem, .1rem, 0);\n                    width: $gutter;\n                  }\n                }\n            }\n            \n            &.step-2 {\n                td {\n                  --position: calc(var(--start, 0) * .01turn);\n                }\n\n                td::after,\n                td::before {\n                  left: 50%;\n                  position: absolute;\n                  top: 40%;\n                  transform-origin: center center;\n                }\n\n                /**\n                 * Using clip-path + calc() + transform + CSS vars\n                 * Using mask-image to make a circle\n                 *\n                 * @note Based on Ana Tudor's work\n                 * @link https://css-tricks.com/1-html-element-5-css-properties-magic/\n                 * @author Ana Tudor\n                 *\n                 * @note Using a Roma Komarov's idea about boolean custom properties\n                 * @link https://www.kizu.ru/conditions-for-css-variables/\n                 *\n                 * @note Mask support:\n                 * @link https://caniuse.com/#search=mask\n                 */\n                td::before {\n                  --zoom: .75;\n                  --part: calc( var(--value) * 3.6 );\n                  --main-angle: calc( var(--part) - ( 90 * ( var(--gt-25, 0) + var(--gt-50, 0) + var(--gt-75, 0) ) ) );\n                  --β: calc( var(--main-angle) * 0.01745329251 );\n                  --α: calc( ( 90 - var(--main-angle) ) * 0.01745329251 );\n                  @include sin(β);\n                  @include sin(α);\n                  --B: calc( var(--hypo) * var(--sin-β) );\n                  --A: calc( var(--hypo) * var(--sin-α) );\n                  --pos-B: calc( ( var(--B) * 100 / var(--hypo) ) / 2 );\n                  --pos-A: calc( ( var(--A) * 100 / var(--hypo) ) / 2 );\n                  background-color: var(--color, currentColor);\n                  clip-path: polygon(\n                    50% 50%,\n                    50% 0%,\n                    100% 0%,\n                    calc( 50% + ( var(--pos-B) * 1% * var(--lt-25, 1) ) + ( var(--gt-25, 0) * 50% ) ) calc( 50% - ( var(--pos-A) * 1% * var(--lt-25, 1) ) ),\n                    calc( 50% + ( var(--gt-25, 0) * 50% ) )                                           calc( 50% + ( var(--gt-25, 0) * 50% ) ),\n                    calc( 50% + ( var(--pos-A) * 1% * var(--lt-50, 1) ) + ( var(--gt-50, 0) * 50% ) ) calc( 50% + ( var(--pos-B) * 1% * var(--lt-50, 1) ) + ( var(--gt-50, 0) * 50% ) ),\n                    calc( 50% - ( var(--gt-50, 0) * 50% ) )                                           calc( 50% + ( var(--gt-50, 0) * 50% ) ),\n                    calc( 50% - ( var(--pos-B) * 1% * var(--lt-75, 1) ) - ( var(--gt-75, 0) * 50% ) ) calc( 50% + ( var(--pos-A) * 1% * var(--lt-75, 1) ) ),\n                    calc( 50% - ( var(--gt-75, 0) * 50% ) )                                           calc( 50% - ( var(--gt-75, 0) * 50% ) ),\n                    calc( 50% - ( var(--pos-A) * 1% * var(--gt-75, 0) ) )                             calc( 50% - ( var(--pos-B) * 1% * var(--gt-75, 0) ) ),\n                    50% 50%\n                  );\n                  content: '';\n                  height: var(--side);\n                  mask-image: radial-gradient(\n                    circle at center,\n                    palette( default, contrast) 0%,\n                    palette( default, contrast) calc(var(--side) / 2),\n                    transparent calc(var(--side) / 2)\n                  );\n                  transform:\n                    translate3d(-50%, -50%, 0)\n                    rotate( var(--position) )\n                    scale( var(--zoom) );\n                  transition: transform .2s map-get( $timing-functions, 'move' );\n                  width: var(--side);\n                  will-change: transform;\n                }\n\n                tr:hover td::before {\n                  --zoom: .8;\n                }\n\n                @each $name, $pattern in $patterns {\n                  $i: index($patterns, ($name $pattern));\n\n                  tr:nth-child(#{$i}n + #{$i}) *::before {\n                    background-image: var(--#{$name}); /* 1 */\n                  }\n                }\n\n                td::after {\n                  --arrow: calc(100% - #{$gutter / 4});\n                  --axis: calc( var(--position) - .25turn + var(--value) * .005turn );\n                  --away: calc( var(--side) / 2 - #{$gutter} );\n                  background-color: palette( dominant );\n                  color: palette( dominant, contrast );\n                  content: var(--term) \"\\A0: \" counter(value) \"\\A0%\";\n                  counter-reset: value var(--value);\n                  opacity: 0;\n                  padding: $gutter / 2;\n                  pointer-events: none;\n                  transform-origin: 50% calc(100% + 10px);\n                  transform:\n                    translate3d(-50%, -50%, 0)\n                    rotate( var(--axis) )\n                    translate( var(--away) )\n                    rotate( calc( var(--axis) * -1 ) )\n                    perspective(1000px)\n                    rotate3d(1, 0, 0, 45deg);\n                  transition:\n                    opacity .2s map-get( $timing-functions, 'enter' ),\n                    transform .2s map-get( $timing-functions, 'enter' );\n                  will-change: opacity, transform;\n                }\n\n                tbody:hover tr {\n                  opacity: .5;\n\n                  &:hover {\n                    opacity: 1;\n                  }\n\n                  &:hover td::after {\n                    opacity: 1;\n                    transform:\n                      translate3d(-50%, -50%, 0)\n                      rotate( var(--axis) )\n                      translate( var(--away) )\n                      rotate( calc( var(--axis) * -1 ) )\n                      perspective(1000px)\n                      rotate3d(1, 0, 0, 0deg);\n                    transition:\n                      opacity .2s map-get( $timing-functions, 'exit' ),\n                      transform .2s map-get( $timing-functions, 'exit' );\n                  }\n                }\n              }\n          }\n\n          &.pie.step-2.polar {\n            td::before {\n              --zoom: 50;\n              transform:\n                translate3d(-50%, -50%, 0)\n                rotate( var(--position) )\n                scale( calc( ( var(--zoom) + ( var(--value) / ( 100 / var(--zoom) ) ) ) / 100 ) );\n            }\n\n            tr:hover td::before {\n              --zoom: 50;\n            }\n          }\n\n          &.donut {\n             mask-image: radial-gradient(\n               circle at 50% calc(50% - #{$gutter * 2}),\n               transparent 0%,\n               transparent var(--offset),\n               palette( default, contrast) calc(var(--offset) + 1px),\n               palette( default, contrast) 100%\n             );\n\n             td::after {\n               --away: calc( var(--side) / 2 - #{$gutter * 2.5} );\n             }\n           }\n\n          /**\n           * @note Custom color palette for WHCM\n           * @note Inspired by Greg Whitworth's post\n           * @link http://www.gwhitworth.com/blog/2017/04/how-to-use-ms-high-contrast\n           */\n          @media screen and (-ms-high-contrast: active) {\n            &.pie {\n              tbody tr *::before {\n                background-color: Window;\n              }\n\n              tbody tr:nth-of-type(odd) *::before {\n                background-color: WindowText;\n              }\n            }\n          }\n      }\n    }\n}\n"]}
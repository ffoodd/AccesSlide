/* ==================== */
/* == sseeeedd
/* ==================== */
@import "sseeeedd-func";
@import "sseeeedd-vars";

.pl-5 {
  padding-left: 5rem;
}

body > :not(.modeplan) .slide {
    overflow:hidden !important;
}

/* ==================== */
/* == Tables
/* ==================== */

table {
  font-size: 1rem;
  margin: auto;
}

pre[class*="language-"] {
    overflow-y: hidden;
}

pre code[class*="language-"] {
  font-size: 1.25rem;
}

.table-ffoodd {
  background: palette( default, contrast );
  border-collapse: collapse;
  caption-side: top;
  font-feature-settings: "tnum";
  width: 100%;
  vertical-align: top;

  > caption:first-child {
    font-style: italic;
    margin: 0;
    padding: rem( 40 ) $gutter;
  }
  
  th,
  td {
    padding: $gutter / 2 rem( 12 );
    text-align: left;

    thead &,
    tbody & {
      border-bottom: 1px solid palette( default, secondary );
    }
  }

  th,
  table strong {
    color: palette( dominant, dark );
  }

  td {
    line-height: 1.25;
    max-width: 100%;
  }

  tbody {
    border: 1px solid palette( default, secondary );
  }
}

/* ==================== */
/* == Charts
/* ==================== */

[class*="charts"] {
  dd[role="presentation"] {
    display: none;
  }

  abbr[title] {
    border-bottom: 0;
    font-size: small;
    font-weight: normal;
    text-transform: none;
  }
}

/* ==================== */
/* == Table based Charts
/* ==================== */

.table-charts {
  caption-side: bottom;
  empty-cells: hide;
  margin: 1.5em auto;
  overflow: hidden;
  padding: 1em;

  > caption:first-child {
    background: inherit;
    font-style: normal;
    padding: $gutter 0;
  }
}

@media screen and (min-width: em(480)) {
  .table-charts {
    border-collapse: separate;
    border-spacing: 0;

    th,
    td {
      border: 0;
      padding: 0;

      &:empty {
        display: none;
      }
    }

    /** Bar charts */
    @supports (grid-template-columns: repeat(var(--scale, 100), minmax(0, 1fr))) {
      &.bar {
        
        &.step-1 {
          caption {
            text-align: initial;
            text-indent: em( 256 );
          }
          
          tbody tr {
            display: grid;
            grid-auto-rows: 1fr;
            grid-row-gap: $gutter / 2;
            grid-template-columns: minmax(min-content, em( 240 )) repeat(var(--scale, 100), minmax(0, 1fr)) 10ch;
            transition: opacity .2s map-get( $timing-functions, 'move' );

            th {
              grid-column: 1 / 1;
              margin: $gutter / 2 0 0;
              padding: 0 $gutter 0 0;
              text-align: right;
            }
            
            td {
              background: currentColor;
              grid-column: 2 / var(--value, 0);
              margin: $gutter / 2 0 0;
              position: relative;
            }
          }
        }
          
        &.step-2 {
          tbody tr td span {
            background: inherit;
            -webkit-text-fill-color: transparent;
            -webkit-background-clip: text;
            font-weight: bold;
            left: 100%;
            position: absolute;
          }
        }
        
        &.step-3 {
          tbody tr {
            td {
              --size: calc(var(--scale, 100) * 100%);
              --position: calc(var(--value, 0) / var(--scale, 100) * 100%);
              background-blend-mode: hard-light;
              background-color: transparent;
              background-position: var(--position) 0%, center;
              background-size:  var(--size) 100%, contain;
            }
            
            @each $name, $pattern in $patterns {
              $i: index($patterns, ($name $pattern));

              &:nth-child(#{$i}n + #{$i}) td {
                background-image:
                  linear-gradient(to right,
                    palette( success, dark ),
                    palette( dominant ),
                    palette( secondary ),
                    palette( accent ),
                    palette( alert )
                  ),
                  url($pattern); /* 1 */
              }
            }
          }
        }

        &.step-4 {
          &:hover {
            tr {
              opacity: .5;
            }

            tr:hover {
              opacity: 1;
            }
          }

          /**
           * @note Custom color palette for WHCM
           * @note Inspired by Greg Whitworth's post
           * @link http://www.gwhitworth.com/blog/2017/04/how-to-use-ms-high-contrast
           */
          @media screen and (-ms-high-contrast: active) {
            @each $name, $pattern in $patterns {
              $i: index($patterns, ($name $pattern));

              &:nth-child(#{$i}n + #{$i}) td {
                background-image:
                  linear-gradient(to right,
                    Window,
                    ButtonFace,
                    ButtonShadow,
                    ButtonText,
                    highlight
                  ),
                  url($pattern);
              }
            }
          }
            
          &.waterfall {
            @each $number in 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 {
              tr:nth-of-type(#{$number}) td {
                grid-column: var(--#{$number - 1}, 0) / var(--value, 0);
              }
            }
          }
        }
      }
    }

    /** Line charts
     * @note 1. calc() in width doesn't work in Firefoxâ€¦
     */
    @supports (clip-path: polygon(0% calc(100% - (var(--1) * 100% / var(--y))))) {
      &.line {
        --offset: calc((100% / var(--x)) / 2);
        position: relative;
        transition:
          background .3s map-get( $timing-functions, 'move' ),
          color .3s map-get( $timing-functions, 'move' );

        &::after,
        &::before {
          bottom: $gutter * 8;
          content: "";
          position: absolute;
          top: 0;
          width: 100%;
        }
        
        th,
        td {
          font-weight: bold;
          text-align: center;
          width: calc( 100% / var(--x) );
          width: 8.3%; /* 1 */

          &:hover {
            color: palette( secondary );
          }
        }

        &.step-1 {
            padding: calc(#{$width / 2} - #{$gutter * 2}) 0 $gutter;
        
            &::after {
              --scale: calc(100% / var(--y));
              background: repeating-linear-gradient(to bottom, white, white var(--scale), rgba(0, 0, 0, .25) calc(var(--scale) + #{$gutter / 8}));
              z-index: 1;
            }
        }

        &.step-2 {
            &::before {
              background: linear-gradient(to top, palette( secondary, light ), palette( alert ) 75%);
              clip-path: polygon(
                0% calc(100% - (var(--1) / var(--y) * 100%)),
                var(--offset) calc(100% - (var(--1) / var(--y) * 100%)),
                calc((100% / var(--x) * 1) + var(--offset)) calc(100% - (var(--2) / var(--y) * 100%)),
                calc((100% / var(--x) * 2) + var(--offset)) calc(100% - (var(--3) / var(--y) * 100%)),
                calc((100% / var(--x) * 3) + var(--offset)) calc(100% - (var(--4) / var(--y) * 100%)),
                calc((100% / var(--x) * 4) + var(--offset)) calc(100% - (var(--5) / var(--y) * 100%)),
                calc((100% / var(--x) * 5) + var(--offset)) calc(100% - (var(--6) / var(--y) * 100%)),
                calc((100% / var(--x) * 6) + var(--offset)) calc(100% - (var(--7) / var(--y) * 100%)),
                calc((100% / var(--x) * 7) + var(--offset)) calc(100% - (var(--8) / var(--y) * 100%)),
                calc((100% / var(--x) * 8) + var(--offset)) calc(100% - (var(--9) / var(--y) * 100%)),
                calc((100% / var(--x) * 9) + var(--offset)) calc(100% - (var(--10) / var(--y) * 100%)),
                calc((100% / var(--x) * 10) + var(--offset)) calc(100% - (var(--11) / var(--y) * 100%)),
                calc((100% / var(--x) * 11) + var(--offset)) calc(100% - (var(--12) / var(--y) * 100%)),
                100% calc(100% - (var(--12) / var(--y) * 100%)),
                100% 100%,
                0% 100%
              );
              z-index: 2;
            }

            th {
              &::after {
                background-color: palette( default, contrast );
                background-image: url( map-get( $patterns, 'stripes' ) );
                background-blend-mode: exclusion;
                bottom: $gutter * 4;
                content: "";
                height: calc(100% - #{$gutter * 4});
                mix-blend-mode: soft-light;
                opacity: 0;
                position: absolute;
                transition: opacity .3s map-get( $timing-functions, 'move' );
                width: inherit;
                z-index: 3;
              }

              @each $number in 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 {
                &:nth-child(#{$number + 1})::after {
                  left: calc(100% / var(--x) * #{$number - 1});
                }
              }

              &:hover::after {
                opacity: .75;
              }
            }
        }

        &.points {
            &::before {
              clip-path: polygon(
                0% calc(100% - (var(--1) / var(--y) * 100%)),
                var(--offset) calc(100% - (var(--1) / var(--y) * 100%)),
                calc((100% / var(--x) * 1) + var(--offset)) calc(100% - (var(--2) / var(--y) * 100%)),
                calc((100% / var(--x) * 2) + var(--offset)) calc(100% - (var(--3) / var(--y) * 100%)),
                calc((100% / var(--x) * 3) + var(--offset)) calc(100% - (var(--4) / var(--y) * 100%)),
                calc((100% / var(--x) * 4) + var(--offset)) calc(100% - (var(--5) / var(--y) * 100%)),
                calc((100% / var(--x) * 5) + var(--offset)) calc(100% - (var(--6) / var(--y) * 100%)),
                calc((100% / var(--x) * 6) + var(--offset)) calc(100% - (var(--7) / var(--y) * 100%)),
                calc((100% / var(--x) * 7) + var(--offset)) calc(100% - (var(--8) / var(--y) * 100%)),
                calc((100% / var(--x) * 8) + var(--offset)) calc(100% - (var(--9) / var(--y) * 100%)),
                calc((100% / var(--x) * 9) + var(--offset)) calc(100% - (var(--10) / var(--y) * 100%)),
                calc((100% / var(--x) * 10) + var(--offset)) calc(100% - (var(--11) / var(--y) * 100%)),
                calc((100% / var(--x) * 11) + var(--offset)) calc(100% - (var(--12) / var(--y) * 100%)),
                100% calc(100% - (var(--12) / var(--y) * 100%)),
                100% calc((100% + #{$gutter / 4}) - (var(--12) / var(--y) * 100%)),
                calc((100% / var(--x) * 11) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--12) / var(--y) * 100%)),
                calc((100% / var(--x) * 10) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--11) / var(--y) * 100%)),
                calc((100% / var(--x) * 9) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--10) / var(--y) * 100%)),
                calc((100% / var(--x) * 8) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--9) / var(--y) * 100%)),
                calc((100% / var(--x) * 7) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--8) / var(--y) * 100%)),
                calc((100% / var(--x) * 6) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--7) / var(--y) * 100%)),
                calc((100% / var(--x) * 5) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--6) / var(--y) * 100%)),
                calc((100% / var(--x) * 4) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--5) / var(--y) * 100%)),
                calc((100% / var(--x) * 3) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--4) / var(--y) * 100%)),
                calc((100% / var(--x) * 2) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--3) / var(--y) * 100%)),
                calc((100% / var(--x) * 1) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--2) / var(--y) * 100%)),
                var(--offset) calc((100% + #{$gutter / 4}) - (var(--1) / var(--y) * 100%)),
                0% calc((100% + #{$gutter / 4}) - (var(--1) / var(--y) * 100%))
              );
              z-index: 2;
            }

            th {
              &::before {
                --height: calc(100% - 8rem);
                --size: #{$gutter};
                background-image: linear-gradient(to top, palette( secondary, light ), palette( alert ) 50%);
                background-position-x: 0;
                background-size: 100% calc(var(--y) * 200%);
                border: 2px solid palette( default, contrast );
                border-radius: 50%;
                box-shadow: 0 0 #{$gutter / 4} rgba(0, 0, 0, .5);
                content: "";
                height: var(--size);
                position: absolute;
                transform: translate3d(calc(var(--size) / -2), calc(var(--size) / -2), 0);
                transition: transform .3s map-get( $timing-functions, 'move' );
                width: var(--size);
                z-index: 4;
              }

              @each $name, $pattern in $patterns {
                $i: index($patterns, ($name $pattern));

                tr:nth-child(#{$i}n + #{$i}) th::before,
                tr:nth-child(#{$i}n + #{$i}) [role="presentation"]::before  {
                  background-image: url($pattern); /* 1 */
                }
              }

              @each $number in 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 {
                &:nth-of-type(#{$number + 1})::before {
                  background-position-y: calc((var(--height) - (var(--#{$number}) / var(--y) * var(--height))));
                  left: calc((100% / var(--x) * #{$number - 1}) + var(--offset));
                  top: calc((var(--height) - (var(--#{$number}) / var(--y) * var(--height))));
                }
              }

              &::after {
                mix-blend-mode: multiply;
              }

              &:hover {
                &::before {
                  transform: translate3d(calc(var(--size) / -2), calc(var(--size) / -2), 0) scale(1.5);
                }

                &::after {
                  opacity: .5;
                }
              }
            }
          }
        }
      

      /**
       * @note Custom color palette for WHCM
       * @note Inspired by Greg Whitworth's post
       * @link http://www.gwhitworth.com/blog/2017/04/how-to-use-ms-high-contrast
       */
      @media screen and (-ms-high-contrast: active) {
        &.line::before {
          background: linear-gradient(to top, ButtonHighlight, Highlight 75%);
        }
      }
    }

    /** Pie charts */
    @supports (--position: calc(var(--start, 0) * .01turn)) {
      &.pie {
        margin: 0 auto;
        position: relative;
        
        &.step-1 {
            tbody {
              display: table-row;
            }

            tbody tr {
              display: table-cell;
            }
            
            tbody th {
              padding-right: $gutter / 2;

              &::before {
                background: var(--color, currentColor);
                content: "";
                display: inline-block;
                height: 1rem;
                transform: translate3d(-.2rem, .1rem, 0);
                width: 1rem;
              }
            }
            
            @each $name, $pattern in $patterns {
              $i: index($patterns, ($name $pattern));

              tr:nth-child(#{$i}n + #{$i}) th::before,
              tr:nth-child(#{$i}n + #{$i}) [role="presentation"]::before  {
                background-image: url($pattern); /* 1 */
              }
            }
        }

        &.step-2 {
            padding-top: calc(#{$width / 2} - #{$gutter * 2});
          
            /**
             * @note Pie chart based on:
             * @link https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/
             * @author Lea Verou
             */
            [role="presentation"] {
              --position: calc(var(--start, 0) * .01turn);
              --zoom: .75;
              clip-path: circle(50% at 0% 50%);
              display: block;
              height: 100%;
              left: 50%;
              overflow: hidden;
              pointer-events: none;
              position: absolute;
              top: $gutter * -4;
              transform:
                rotate(var(--position))
                scale(var(--zoom));
              transform-origin: left center;
              transition: transform .2s map-get( $timing-functions, 'move' );
              width: $width / 2;

              &::before {
                --position: calc(var(--value, 0) * .01turn + 1deg);
                background-color: var(--color, currentColor);
                content: "";
                display: initial;
                height: 100%;
                left: -100%;
                margin: initial;
                pointer-events: auto;
                position: inherit;
                top: 0;
                transform: rotate(var(--position));
                transform-origin: right center;
                width: 100%;
              }
            }

            tr:hover [role="presentation"] {
              --zoom: .8;
            }
        }
        
         /**
           * Using mask-image to make a Donut
           *
           * @note Based on Ana Tudor's work
           * @link https://css-tricks.com/1-html-element-5-css-properties-magic/
           * @author Ana Tudor
           *
           * @note Mask support:
           * @link https://caniuse.com/#search=mask
           */
          @supports (mask: var(--mask)) {
               &.donut {
                 mask-image: radial-gradient(
                   circle at 50% calc(50% - #{$gutter * 2.5}),
                   transparent 0%,
                   transparent var(--offset),
                   palette( default, contrast) calc(var(--offset) + 1px),
                   palette( default, contrast) 100%
                 );
               }
           }
      }

      /**
       * @note Custom color palette for WHCM
       * @note Inspired by Greg Whitworth's post
       * @link http://www.gwhitworth.com/blog/2017/04/how-to-use-ms-high-contrast
       */
      @media screen and (-ms-high-contrast: active) {
        &.pie {
          th::before,
          [role="presentation"]::before {
            background-color: Window;
          }

          tr:nth-of-type(odd) th::before,
          tr:nth-of-type(odd) [role="presentation"]::before {
            background-color: WindowText;
          }
        }
      }
    }
  }


    /* ==================== */
    /* == Radar Charts
    /* ==================== */
    figure[role="group"] {
        background: white;
        display: block;
        margin: 0 auto;
        overflow: hidden;
        padding: 1rem;
        
        figcaption {
            display: block;
            padding: 1rem 0;
        }
    }

    .slide {
        dl,
        dd {
          font-size: 1rem;
          margin: 0 auto;
        }

        dd + dt {
          margin: $gutter 0 0;
        }

        dt dfn {
          font-style: normal;
        }

        figure {
          text-align: left;
            
          dt {
            clear: left;
            float: left;
            margin: 0 0 $gutter;
          }

          dd {
            display: flex;
            margin: 0 0 $gutter;
              
            &::before {
                border-top: 1px dotted;
                content: "";
                flex: 1;
                margin: 0 .5rem;
                transform: translateY(.9rem);
            }
              
            &::after {
                color: palette( muted );
                content: "\A0/\A0" attr(data-scale);
            }
          }

          dl + figcaption {
            font-size: 1rem;
            text-align: center;
          }
        }   
    }

    @supports(clip-path: polygon(calc( 0% 0%, 100% - ( var(--1) * 100% / var(--scale) ) ) 100%, 100% 100%)) {
    .charts-radar {
      --radius: #{$width / 6};
      --size: calc( var(--radius) / var(--scale) );
      --part: calc( 360deg / var(--items) );
      background-image:
        repeating-radial-gradient(
          circle at 50%,
          rgba(0, 0, 0, .2),
          rgba(0, 0, 0, .2) 2px,
          transparent 2px,
          transparent calc(var(--size) * var(--step))
        ),
        repeating-radial-gradient(
          circle at 50%,
          rgba(0, 0, 0, .1),
          rgba(0, 0, 0, .1) 2px,
          transparent 2px,
          transparent var(--size)
        );
      border: 2px solid;
      border-radius: 50%;
      height: calc( var(--radius) * 2 );
      margin: 0 auto $gutter * 6 !important;
      position: relative;
      width: calc( var(--radius) * 2 );
        
        dd {
          &::after,
          &::before {
              display: none;
          }
        }

        &.step-1 {
            margin: $gutter * 6 auto !important;
          /**
           * Placing items around a circle based on:
           * @link https://stackoverflow.com/questions/12813573/position-icons-into-circle
           * @link http://dabblet.com/gist/3866686
           * @author Ana Tudor
           *
           * @note Negative values for radius helps to start at the top left corner
           */
          dt {
            --away: calc( (var(--radius) * -1) - 50% );
            left: 50%;
            margin: initial;
            padding: 0 $gutter;
            position: absolute;
            top: 50%;
            transform:
              translate3d(-50%, -50%, 0)
              rotate( calc(var(--part) * var(--index, 1)) )
              translate( var(--away) )
              rotate( calc(var(--part) * var(--index, 1) * -1) );

            &::after {
              content: attr(data-value) "\A0/\A0" attr(data-scale);
              color: palette( accent );
              display: block;
              font-size: small;
              font-weight: 400;
            }

            @each $number in 1, 2, 3, 4, 5, 6, 7 {
              &:nth-of-type(#{$number}) {
                --index: #{$number};
              }
            }
          }
            
            dd {
                color: transparent;
            }
        }
            
        &.step-2 {
            dd {
                color: inherit;
                height: 50%;
                left: 0;
                margin: initial;
                position: absolute;
                top: 0;
                width: 50%;
                
              span {
                  background: linear-gradient(
                    to top left,
                    palette( accent, light ) 10%,
                    palette( secondary, dark ) 75%
                  );
                  filter: drop-shadow( 0 0 $gutter palette( accent, dark ) );
                  height: 100%;
                  position: absolute;
                  width: 100%;
              }
              
              @each $number in 1, 2, 3, 4, 5, 6, 7 {
                  &:nth-of-type(#{$number}) {
                    --index: #{$number};

                    span {
                      --pos: calc( 100% - (var(--#{$number + 1}) * 100% / (var(--scale) ) ) );
                      clip-path: polygon(
                        100% var(--pos),
                        calc( 100% - ( var(--#{$number}) * 100% / var(--scale) ) ) 100%,
                        100% 100%
                      );
                  }
                }
          }
        }
        
            }
        
        &.step-3 {
          /**
           * This is quite sophisticated, we're mixing multiple techniques
           *
           * @note Setting items as parts of the circle:
           * @link https://tympanus.net/codrops/2013/08/09/building-a-circular-navigation-with-css-transforms/
           * @author Sara Soueidan
           *
           * @note Because we skew items, clip-path() needs to take skew angle into account
           * @note To do so, we need to know skewed width (which is hypothenuse of the resulting triangle)
           * @note We only know two angles (skew one + suqare one) and a side (initial width),
           * @note So we need to compute the sinus of the opposite angle to get hypothenuse
           * @note Thanks god, Stereokai made trigonometry functions in pure CSS:
           *
           * @note Trigonometry functions based on:
           * @link https://gist.github.com/stereokai/7666bfe93929b14c2dced148c79e0e97
           * @author Stereokai
           */
          dd {
            --skew: calc( 90deg - var(--part) );
            border-bottom: 1px solid palette( accent, light );
            transform:
              rotate( calc(var(--part) * var(--index, 1)) )
              skew( var(--skew) );
            transform-origin: 100% 100%;
          }
        }

        &.step-4 dd {
            --unitless-radius: calc( 980 / 16 / 6 );
            
            span {
              --opposite: calc( 180 - (90 + (90 - (360 / var(--items)))) );
              // get opposite angle in radians
              --angle: calc( var(--opposite) * 0.01745329251 );
              // calc() sin, dark wizardry!
              --sin-term1: var(--angle);
              --sin-term2: calc((var(--angle) * var(--angle) * var(--angle)) / 6);
              --sin-term3: calc((var(--angle) * var(--angle) * var(--angle) * var(--angle) * var(--angle)) / 120);
              --sin-term4: calc((var(--angle) * var(--angle) * var(--angle) * var(--angle) * var(--angle) * var(--angle) * var(--angle)) / 5040);
              --sin-term5: calc((var(--angle) * var(--angle) * var(--angle) * var(--angle) * var(--angle) * var(--angle) * var(--angle) * var(--angle) * var(--angle)) / 362880);
              --sin: calc(var(--sin-term1) - var(--sin-term2) + var(--sin-term3) - var(--sin-term4) + var(--sin-term5));
              // calc() hypothenuse
              --hypo: calc( var(--unitless-radius) / var(--sin) );
              // get the ratio: skewed / initial width
              --ratio: calc( var(--hypo) / var(--unitless-radius) );
            }

            @each $number in 1, 2, 3, 4, 5, 6, 7 {
              &:nth-of-type(#{$number}) {
                --index: #{$number};

                span {
                  --pos: calc( 100% - (var(--#{$number + 1}) * 100% / (var(--scale) * var(--ratio) ) ) );
                  clip-path: polygon(
                    100% var(--pos),
                    calc( 100% - ( var(--#{$number}) * 100% / var(--scale) ) ) 100%,
                    100% 100%
                  );
                }
              }
            }
        }
      }
    }

}
